Step 0) Assumptions:

	The first assumption is that you have Borland Pascal installed in Z:\BP.  
	If you don't, you'll have to update the BPC.CFG and BUILD-DOS.CMD files

	The second assumption is that you have Virtual Pascal installed in Z:\vp21.
	If you don't, you'll have to update the Linux, OS/2 and Win32 build files

	*NOTE* The BUILD-*.CMD files will copy a BPC.CFG or VPC.CFG into the relevant bin directory, meaning
	if you have cusomized the .CFG file in the bin directory, it will be lost.  Make a backup!

Step 1) Create directories to hold everything:

	Z:\Usurper
	Z:\Programming\Usurper
	Z:\Programming\Usurper\EXE\DOS
	Z:\Programming\Usurper\EXE\LINUX
	Z:\Programming\Usurper\EXE\OS2
	Z:\Programming\Usurper\EXE\WIN32

	If you don't have a Z: drive, you can use SUBST or map a network drive to fake one
	You can also put the files in an alternate location if you want, you'll just have to update the BUILD-*.CMD scripts

Step 2) Get the source

	Check out the GIT contents into Z:\Programming\Usurper

Step 3) Edit Z:\vp21\source\tv\dialogs.pas

	TLabel.HandleEvent has a bug that will cause EDITOR32 to crash.  So go to line 2068, which should be:

    C := HotKey(Text^);
    if (GetAltCode(C) = Event.KeyCode) or
       ((C <> #0) and (Owner^.Phase = phPostProcess) and
        (UpCase(Event.CharCode) = C)) then FocusLink

	And wrap it in a check to see if Text is assigned.  In other words, replace it with:

    if Assigned(Text) then
    begin
      C := HotKey(Text^);
      if (GetAltCode(C) = Event.KeyCode) or
         ((C <> #0) and (Owner^.Phase = phPostProcess) and
          (UpCase(Event.CharCode) = C)) then FocusLink
    end;

Step 4) Edit Z:\vp21\source\rtl\vpsysw32.pas

	For some reason the cursor position isn't always updated in the background thread in the Win32 version.  I'm guessing
    it's a race condition with the CurXPos and CurYPos variables, so the thread doesn't think an update is needed when
    one really is.   So I've updated my copy of CursorThreadFunc to take the return value of the SemWaitEvent() call into
    account, so the update will also happen if the event is signaled.  Can't think of a reason why they wouldn't have done
    this in the first place.  Here's the entire function to copy/paste into place:
    
    function CursorThreadFunc(P: Pointer): Longint;
    var
      LastX, LastY: Longint;
    begin
      LastX := -1;
      LastY := -1;
      repeat
        if SemWaitEvent(semCursor, 300) or (CurXPos <> LastX) or (CurYPos <> LastY) then
          begin
            DoSetCursorPosition;
            LastX := CurXPos;
            LastY := CurYPos;
          end;
      until tidCursor = -2;
      tidCursor := -1;
    end;
    
Step 5) Extract build scripts / config files

        Extract COMPILE.ZIP (into the same directory as COMPILE.TXT).  As mentioned in Step 0, you'll need to modify this
        file if you aren't running off the Z:\ drive.

Step 5) Build new EXEs

        Run BUILD-DOS.CMD, BUILD-LINUX.CMD, BUILD-OS2.CMD, or BUILD-WIN32.CMD to build EXEs for one of the platforms
	and have the EXEs copied to Z;\Usurper

	Each platform will have the EXEs named slightly differently to avoid overwriting each other:
	DOS will use the original EDITOR.EXE and USURPER.EXE
	Linux will drop the .EXE and become just EDITOR and USURPER
	OS2 will add a 2 and become EDITOR2.EXE and USURPER2.EXE
	Win32 will add a 32 and become EDITOR32.EXE and USURPER32.exe
